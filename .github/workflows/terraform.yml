# Terraform Infrastructure CI/CD Pipeline

name: "Terraform Infrastructure"

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'

env:
  TF_VERSION: "1.6.0"
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-west-2' }}

jobs:
  terraform-check:
    name: "Terraform Check"
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.get-environments.outputs.environments }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Get Changed Environments
        id: get-environments
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For PRs, get changed files
            changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          else
            # For pushes, check last commit
            changed_files=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          # Extract unique environments from changed terraform files
          environments=$(echo "$changed_files" | grep "^terraform/environments/" | cut -d'/' -f3 | sort -u | jq -R -s -c 'split("\n")[:-1]')
          
          # If no specific environments changed, run for dev by default
          if [ "$environments" == "[]" ] || [ -z "$environments" ]; then
            environments='["dev"]'
          fi
          
          echo "environments=$environments" >> $GITHUB_OUTPUT
          echo "Detected environments: $environments"

  terraform-validate:
    name: "Validate"
    runs-on: ubuntu-latest
    needs: terraform-check
    if: needs.terraform-check.outputs.environments != '[]'
    
    strategy:
      matrix:
        environment: ${{ fromJson(needs.terraform-check.outputs.environments) }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: |
          cd terraform/environments/${{ matrix.environment }}
          terraform fmt -check -recursive

      - name: Terraform Init
        run: |
          cd terraform/environments/${{ matrix.environment }}
          terraform init -backend=false

      - name: Terraform Validate
        run: |
          cd terraform/environments/${{ matrix.environment }}
          terraform validate

  security-scan:
    name: "Security Scan"
    runs-on: ubuntu-latest
    needs: terraform-check
    if: needs.terraform-check.outputs.environments != '[]'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Checkov
        run: |
          pip install checkov

      - name: Run Checkov
        run: |
          checkov -d terraform/ --framework terraform \
            --output cli --output sarif --output-file-path console,checkov-results.sarif \
            --soft-fail

      - name: Upload Checkov results to GitHub Advanced Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-results.sarif

  opa-policy-check:
    name: "OPA Policy Check"
    runs-on: ubuntu-latest
    needs: terraform-check
    if: needs.terraform-check.outputs.environments != '[]'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup OPA
        uses: open-policy-agent/setup-opa@v2
        with:
          version: latest

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Generate Terraform Plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          for env in $(echo '${{ needs.terraform-check.outputs.environments }}' | jq -r '.[]'); do
            cd terraform/environments/$env
            terraform init
            terraform plan -out=tfplan
            terraform show -json tfplan > tfplan.json
            cd ../../..
          done

      - name: Run OPA Policy Tests
        run: |
          # Test policies against terraform plans
          for env in $(echo '${{ needs.terraform-check.outputs.environments }}' | jq -r '.[]'); do
            echo "Testing policies for environment: $env"
            opa eval -d terraform/policies -i terraform/environments/$env/tfplan.json \
              "data.terraform.deny[x]" --format pretty
          done

  terraform-docs:
    name: "Generate Documentation"
    runs-on: ubuntu-latest
    needs: terraform-check
    if: needs.terraform-check.outputs.environments != '[]'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Render terraform docs and push changes back to PR
        uses: terraform-docs/gh-actions@main
        with:
          working-dir: terraform/
          output-file: README.md
          output-method: inject
          git-push: "true"
          git-commit-message: "docs: update terraform documentation"

  terraform-test:
    name: "Terraform Test"
    runs-on: ubuntu-latest
    needs: [terraform-validate, security-scan]
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        environment: ${{ fromJson(needs.terraform-check.outputs.environments) }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run Terraform Tests
        run: |
          cd terraform/environments/${{ matrix.environment }}
          terraform init
          if [ -d "tests/" ]; then
            terraform test
          else
            echo "No tests found for environment ${{ matrix.environment }}"
          fi

  terraform-plan:
    name: "Plan"
    runs-on: ubuntu-latest
    needs: [terraform-validate, security-scan, opa-policy-check]
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        environment: ${{ fromJson(needs.terraform-check.outputs.environments) }}
    
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: |
          cd terraform/environments/${{ matrix.environment }}
          terraform init

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform/environments/${{ matrix.environment }}
          terraform plan -no-color -out=tfplan
          terraform show -no-color tfplan > plan.txt
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Plan ðŸ“– \`${{ steps.plan.outcome }}\` - Environment: \`${{ matrix.environment }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-apply:
    name: "Apply"
    runs-on: ubuntu-latest
    needs: [terraform-validate, security-scan, opa-policy-check]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    strategy:
      matrix:
        environment: ${{ fromJson(needs.terraform-check.outputs.environments) }}
      max-parallel: 1  # Deploy environments sequentially
    
    environment: ${{ matrix.environment }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: |
          cd terraform/environments/${{ matrix.environment }}
          terraform init

      - name: Terraform Apply
        run: |
          cd terraform/environments/${{ matrix.environment }}
          terraform apply -auto-approve

      - name: Update kubeconfig
        run: |
          cd terraform/environments/${{ matrix.environment }}
          cluster_name=$(terraform output -raw cluster_id)
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name $cluster_name
          echo "âœ… Kubeconfig updated for cluster: $cluster_name"