name: "Simple Application Deployment"

on:
  push:
    branches: [main]
    paths:
      - 'app/patient-service/**'
      - 'app/appointment-service/**'
  pull_request:
    branches: [main]
    paths:
      - 'docker/**'
      - 'app/**'
      - 'k8s/**'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
  PROJECT_NAME: devops-challenge

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      patient_changed: ${{ steps.filter.outputs.patient-service }}
      appointment_changed: ${{ steps.filter.outputs.appointment-service }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            patient-service:
              - 'app/patient-service/**'
            appointment-service:
              - 'app/appointment-service/**'
  build:
    runs-on: ubuntu-latest
    needs: detect-changes
    strategy:
      matrix:
        include:
          - service: patient-service
            ecr_repo: devops-challenge-patient-service
            
          - service: appointment-service
            ecr_repo: devops-challenge-appointment-service            
            

    steps:
      - uses: actions/checkout@v4
        
      - name: Skip if no changes
        if: |
          (matrix.service == 'patient-service' && needs.detect-changes.outputs.patient_changed != 'true') ||
          (matrix.service == 'appointment-service' && needs.detect-changes.outputs.appointment_changed != 'true')
        run: |
          echo "No changes in ${{ matrix.service }}. Skipping build."
          exit 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        working-directory: app/${{ matrix.service }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ matrix.ecr_repo }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
  deploy:
    runs-on: ubuntu-latest
    needs: [detect-changes, build]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.32.0'

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.PROJECT_NAME }}-dev-eksnew

      - name: Ensure Namespace Exists
        working-directory: ./k8s/
        run: |
          kubectl get ns microservices || kubectl apply -f Namespace.yaml

      - name: Deploying appointment application in cluster
        working-directory: ./k8s/appointment-service
        run: |
          if [[ "${{ needs.detect-changes.outputs.appointment-service }}" == "true" ]]; then
            sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/appointment-service/*.yaml
            sed -i "s|ECR_REGISTRY|${{ env.ECR_REGISTRY }}|g" k8s/appointment-service/*.yaml
            sed -i "s|PROJECT_NAME|${{ env.PROJECT_NAME }}|g" k8s/appointment-service/*.yaml
            kubectl apply -f deployment.yaml -f service.yaml -f hpa.yaml -f serviceaccount.yaml
          fi

      - name: Deploying patient application in cluster
        working-directory: ./k8s/patient-service
        run: |
          if [[ "${{ needs.detect-changes.outputs.appointment-service }}" == "true" ]]; then
            sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/appointment-service/*.yaml
            sed -i "s|ECR_REGISTRY|${{ env.ECR_REGISTRY }}|g" k8s/appointment-service/*.yaml
            sed -i "s|PROJECT_NAME|${{ env.PROJECT_NAME }}|g" k8s/appointment-service/*.yaml
            kubectl apply -f deployment.yaml -f service.yaml -f hpa.yaml -f serviceaccount.yaml
          fi

      - name: Verify Cluster Access
        run: |
          kubectl get nodes 

      - name: Verify Deployment Access
        run: |
          kubectl get ns
          kubectl get pods -n microservices
          kubectl get svc -n microservices
