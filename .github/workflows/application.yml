name: "Simple Application Deployment"

on:
  push:
    branches: [main, develop]
    paths:
      - 'docker/**'
      - 'app/**'
      - 'k8s/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'docker/**'
      - 'app/**'
      - 'k8s/**'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
  PROJECT_NAME: devops-challenge

jobs:

  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      appointment: ${{ steps.set.outputs.appointment }}
      patient: ${{ steps.set.outputs.patient }}
      any: ${{ steps.set.outputs.any }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: set
        run: |
          git fetch origin main --depth=1
          changed=$(git diff --name-only origin/main)

          echo "appointment=$(echo "$changed" | grep -qE 'app/appointment-service|docker/appointment-service' && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "patient=$(echo "$changed" | grep -qE 'app/patient-service|docker/patient-service' && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "any=$(echo "$changed" | grep -qE 'app/|docker/|k8s/' && echo true || echo false)" >> $GITHUB_OUTPUT

  build-appointment:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.appointment == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push appointment-service
        run: |
          IMAGE_TAG=${{ github.sha }}
          REPO=${{ env.PROJECT_NAME }}-appointment-service
          docker build -f docker/appointment-service/Dockerfile -t $ECR_REGISTRY/$REPO:$IMAGE_TAG -t $ECR_REGISTRY/$REPO:latest .
          docker push $ECR_REGISTRY/$REPO:$IMAGE_TAG
          docker push $ECR_REGISTRY/$REPO:latest

  build-patient:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.patient == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push patient-service
        run: |
          IMAGE_TAG=${{ github.sha }}
          REPO=${{ env.PROJECT_NAME }}-patient-service
          docker build -f docker/patient-service/Dockerfile -t $ECR_REGISTRY/$REPO:$IMAGE_TAG -t $ECR_REGISTRY/$REPO:latest .
          docker push $ECR_REGISTRY/$REPO:$IMAGE_TAG
          docker push $ECR_REGISTRY/$REPO:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [build-appointment, build-patient]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.PROJECT_NAME }}-dev-eks

      - name: Deploy to EKS
        run: |
          for service in appointment-service patient-service; do
            sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/$service/*.yaml || true
            sed -i "s|ECR_REGISTRY|${{ env.ECR_REGISTRY }}|g" k8s/$service/*.yaml || true
            sed -i "s|PROJECT_NAME|${{ env.PROJECT_NAME }}|g" k8s/$service/*.yaml || true
            kubectl apply -f k8s/$service/
          done
