name: "Application Deployment"

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'docker/**'
      - 'app/**'
      - 'src/**'
      - 'k8s/**'
      - '.github/workflows/application.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'docker/**'
      - 'app/**'
      - 'src/**'
      - 'k8s/**'
      - '.github/workflows/application.yml'

env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-west-2' }}
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION || 'us-west-2' }}.amazonaws.com
  PROJECT_NAME: devops-challenge

jobs:

  detect-changes:
    name: "Detect Changes"
    runs-on: ubuntu-latest
    outputs:
      appointment-changed: ${{ steps.changes.outputs.appointment }}
      patient-changed: ${{ steps.changes.outputs.patient }}
      flask-changed: ${{ steps.changes.outputs.flask }}
      k8s-changed: ${{ steps.changes.outputs.k8s }}
      any-changed: ${{ steps.changes.outputs.any }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        run: |
          base_sha="${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || 'HEAD~1' }}"
          head_sha="${{ github.sha }}"
          changed_files=$(git diff --name-only $base_sha..$head_sha)

          appointment_changed=$(echo "$changed_files" | grep -E "^docker/appointment-service/|^app/appointment-service/" | wc -l)
          patient_changed=$(echo "$changed_files" | grep -E "^docker/patient-service/|^app/patient-service/" | wc -l)
          flask_changed=$(echo "$changed_files" | grep -E "^src/|^Dockerfile|^requirements.txt" | wc -l)
          k8s_changed=$(echo "$changed_files" | grep -E "^k8s/" | wc -l)

          echo "appointment=$([[ $appointment_changed -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "patient=$([[ $patient_changed -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "flask=$([[ $flask_changed -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "k8s=$([[ $k8s_changed -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "any=$([[ $appointment_changed -gt 0 || $patient_changed -gt 0 || $flask_changed -gt 0 || $k8s_changed -gt 0 ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

  build-and-push:
    name: "Build and Push Images"
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any == 'true'

    strategy:
      matrix:
        include:
          - service: appointment-service
            path: docker/appointment-service
            context: .
            should_build: ${{ needs.detect-changes.outputs.appointment-changed }}
          - service: patient-service
            path: docker/patient-service
            context: .
            should_build: ${{ needs.detect-changes.outputs.patient-changed }}
          - service: flask-api
            path: src/Dockerfile
            context: src
            should_build: ${{ needs.detect-changes.outputs.flask }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        if: matrix.should_build == 'true'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        if: matrix.should_build == 'true'
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        if: matrix.should_build == 'true'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: matrix.should_build == 'true'

      - name: Build and Push Image
        if: matrix.should_build == 'true'
        env:
          IMAGE_TAG: ${{ github.sha }}
          ECR_REPOSITORY: ${{ env.PROJECT_NAME }}-${{ matrix.service }}
        run: |
          docker build -f ${{ matrix.path }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ${{ matrix.context }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy-to-eks:
    name: "Deploy to EKS"
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-push]
    if: needs.detect-changes.outputs.any == 'true' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.PROJECT_NAME }}-dev-eks

      - name: Update Kubernetes manifests
        run: |
          for service in appointment-service patient-service flask-api; do
            sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/$service/*.yaml || true
            sed -i "s|ECR_REGISTRY|${{ env.ECR_REGISTRY }}|g" k8s/$service/*.yaml || true
            sed -i "s|PROJECT_NAME|${{ env.PROJECT_NAME }}|g" k8s/$service/*.yaml || true
          done

      - name: Apply Manifests
        run: |
          kubectl apply -f k8s/namespace.yaml

          if [ "${{ needs.detect-changes.outputs.appointment-changed }}" == "true" ] || [ "${{ needs.detect-changes.outputs.k8s-changed }}" == "true" ]; then
            kubectl apply -f k8s/appointment-service/
          fi

          if [ "${{ needs.detect-changes.outputs.patient-changed }}" == "true" ] || [ "${{ needs.detect-changes.outputs.k8s-changed }}" == "true" ]; then
            kubectl apply -f k8s/patient-service/
          fi

          if [ "${{ needs.detect-changes.outputs.flask-changed }}" == "true" ] || [ "${{ needs.detect-changes.outputs.k8s-changed }}" == "true" ]; then
            kubectl apply -f k8s/flask-api/
          fi

      - name: Verify Deployments
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/appointment-service -n microservices || true
          kubectl wait --for=condition=available --timeout=300s deployment/patient-service -n microservices || true
          kubectl wait --for=condition=available --timeout=300s deployment/flask-api -n microservices || true
          kubectl get pods -n microservices
          kubectl get services -n microservices
