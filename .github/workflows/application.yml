name: "Simple Application Deployment"

on:
  push:
    branches: [main]
    paths:
      - 'app/patient-service/**'
      - 'app/appointment-service/**'
  pull_request:
    branches: [main]
    paths:
      - 'docker/**'
      - 'app/**'
      - 'k8s/**'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
  PROJECT_NAME: devops-challenge

jobs:
  detect-changes:
    runs-on: self-hosted
    outputs:
      patient_changed: ${{ steps.changes.outputs.patient-service }}
      appointment_changed: ${{ steps.changes.outputs.appointment-service }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Detect Changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            patient-service:
              - 'app/patient-service/**'
            appointment-service:
              - 'app/appointment-service/**'

  build-patient-service:
    name: Build Patient Service
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.patient_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
      - name: Build, tag, and push image
        working-directory: app/patient-service
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: devops-challenge-patient-service
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  build-appointment-service:
    name: Build Appointment Service
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.appointment_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
      - name: Build, tag, and push image
        working-directory: app/appointment-service
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: devops-challenge-appointment-service
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
    runs-on: self-hosted
    needs: [detect-changes, build-appointment-service, build-patient-service]
    if: |
      always() && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: azure/setup-kubectl@v3
        with:
          version: 'v1.32.0'
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.PROJECT_NAME }}-dev-eksnew
      - name: Ensure Namespace Exists
        working-directory: ./k8s/
        run: kubectl apply -f namespace.yaml

      - name: Deploying appointment application in cluster
        if: needs.detect-changes.outputs.appointment_changed == 'true'
        working-directory: ./k8s/appointment-service
        run: |
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" *.yaml
          sed -i "s|ECR_REGISTRY|${{ env.ECR_REGISTRY }}|g" *.yaml
          sed -i "s|PROJECT_NAME|${{ env.PROJECT_NAME }}|g" *.yaml
          kubectl apply -f deployment.yaml -f service.yaml -f hpa.yaml -f serviceaccount.yaml

      - name: Deploying patient application in cluster
        if: needs.detect-changes.outputs.patient_changed == 'true'
        working-directory: ./k8s/patient-service
        run: |
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" *.yaml
          sed -i "s|ECR_REGISTRY|${{ env.ECR_REGISTRY }}|g" *.yaml
          sed -i "s|PROJECT_NAME|${{ env.PROJECT_NAME }}|g" *.yaml
          kubectl apply -f deployment.yaml -f service.yaml -f hpa.yaml -f serviceaccount.yaml
          
      - name: Ensure Ingress deployment
        working-directory: ./k8s/
        run: kubectl apply -f ingress.yml
        
      - name: Verify Cluster Access
        run: kubectl get nodes

      - name: Verify Deployment Access
        run: |
          kubectl get ns
          kubectl get pods -n microservices
          kubectl get svc -n microservices
